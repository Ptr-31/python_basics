Easy tasks:
------------------
Reverse a string (“I love ice cream” -> “maerc eci evol I”)

Reverse a sentence ("Jim loves Maria." -> "Maria loves Jim.") 

Medium:
--------------
Calculate the Greatest Common Divisor 

Unique values. Return distinct values from a list including duplicates (i.e. "1 3 5 3 7 3 1 1 5" -> "1 3 5 7") 

Implement ROT13 algorithm

Hard:
--------------
implement an algorithm for checking password complexity. Bonus: Try using regex. Also make sure that the password has not leaked . You can use the haveibeenpwned API
--------------

Task 1:
Implement a function that takes a list of integers as input and returns a new list with only the even integers from the input list. For example, if the input list is [1, 2, 3, 4, 5, 6], the output list should be [2, 4, 6].
Do the solution with O(n) complexity.


>>> even_numbers([1, 2, 3, 4, 5, 6])
[2, 4, 6]
>>> even_numbers([7, 8, 9, 10, 11, 12])
[8, 10, 12]
>>> even_numbers([0, 1, 2, 3, 4, 5])
[0, 2, 4]


Task 2:
Implement a function that takes a list of integers as input and returns a new list with the integers sorted in descending order. For example, if the input list is [3, 7, 1, 5, 2, 9], the output list should be [9, 7, 5, 3, 2, 1].

Note: You shall implement the sorting algorythm, do not use ready .srot() functions.
Any algorythm is relvant, choose one by your preference - bubble, insertion, selection; Advanced ones: merge, quick, interpolation etc...

>>> descending_sort([3, 7, 1, 5, 2, 9])
[9, 7, 5, 3, 2, 1]
>>> descending_sort([10, 5, 1, 20, 15])
[20, 15, 10, 5, 1]
>>> descending_sort([2, 4, 6, 8, 10])
[10, 8, 6


Task 3:
Implement a function that takes a string as input and returns a new string, containing only numbers. Each number represents the position of the character in the alphabet. Ignore non alpha symbols like spaces, puntuation, etc. If the char is lower than 10 append 0.
Do the solution with O(n) complexity.


>>> alphabet_position("Hello, World!")
'0805121215, 2315181204!'


Task 4:
Implement a function that takes a string as input and returns a new string where each alphabetic character is shifted to the right by a given amount. For example, if the input string is "abc" and the shift amount is 2, the output string should be "cde". If the shift amount is greater than 26, the function should wrap around to the beginning of the alphabet.
Try to use modulus operand.
Do the solution with O(n) complexity.


>>> shift_letters("abc", 2)
'cde'
>>> shift_letters("xyz", 3)
'abc'
>>> shift_letters("Hello, World!", 30)
'Jgnnq, Yqtnf!'


Task 5:
Implement a function that takes a string as input and returns a new string where each character is shifted to the right by a given amount. For example, if the input string is "abc" and the shift amount is 2, the output string should be "cde". If the shift amount is greater than the length of the input string, the function should wrap around to the beginning of the string.
Try to use modulus operand.
Do the solution with O(n) complexity.


>>> shift_characters("hello", 2)
'llohe'
>>> shift_characters("python", 5)
'npytho'
>>> shift_characters("abc", 7)
'bca'



Task 6:
Implement a function that takes a string as input and returns the frequency of each character in the string.
Think of what data structure (list, set, dict) you might use to make your life easier.
Do the solution with O(n) complexity.

>>> char_frequency("hello")
h->1
e->1
l->2
o->1
>>> char_frequency("Python-py")
P->1
h->1
n->1
o->1
t->1
y->2
p->1
>>> char_frequency("banana")
a->3
b->1
n->2


Task 7:
Implement a function that takes two lists of integers as input and returns a list containing the common elements between the two input lists, in ascending order.
Think of what data structure (list, set, dict) you might use to make your life easier.
Do the solution with O(n) complexity.


>>> common_elements([1, 2, 3, 4], [3, 4, 5, 6])
[3, 4]
>>> common_elements([5, 2, 8, 9], [1, 2, 8, 9])
[2, 8, 9]
>>> common_elements([1, 3, 5], [2, 4, 6])
[]


Task 8:
Implement a function that takes a list of strings as input and returns a list of the unique words in the input list, in the order that they first appear.
Think of what data structure (list, set, dict) you might use to make your life easier.
Do the solution with O(n) complexity.

>>> unique_words(['hello', 'world', 'hello', 'python'])
['hello', 'world', 'python']
>>> unique_words(['cat', 'dog', 'dog', 'cat', 'bird', 'mouse'])
['cat', 'dog', 'bird', 'mouse']
>>> unique_words(['apple', 'orange', 'banana'])
['apple', 'orange', 'banana']


Task 9:
Implement a function that takes a list of tuples, where each tuple contains the name and age of a person. Write a Python function that takes in this list as input and returns a new list of tuples, where each tuple contains the name and age of the person, but with the age incremented by 1.
Do the solution with O(n) complexity.

>>> increment_age([("John", 25), ("Mary", 30), ("Bob", 40)])
[("John", 26), ("Mary", 31), ("Bob", 41)]


Task 10:
Implement a function that takes a list of numbers and returns a tuple containing the minimum and maximum values in the list.
IMPORTANT NOTE, for implement:
- Use built-in python functions to find the minimum and maximum values.
- Use the ability to assign values to multiple variables on a single line.

>>> min_max_values([1, 3, 6, 5, 3, 2, 1, 5, -1, 5, 2, 10, 4, 3])
(-1, 10)



Task 11:
Implement a function that takes a list of tuples as input and returns a dictionary where the keys are the first elements of the tuples and the values are lists containing the second elements of the tuples that share the same first element.
Think of what data structure (list, set, dict) you might use to make your life easier.
Do the solution with O(n) complexity.


>>> group_by_first([(1, 'a'), (2, 'b'), (1, 'c'), (3, 'd'), (2, 'e')])
{1: ['a', 'c'], 2: ['b', 'e'], 3: ['d']}
>>> group_by_first([(1, 'x'), (1, 'y'), (2, 'z')])
{1: ['x', 'y'], 2: ['z']}
>>> group_by_first([(1, 'p'), (2, 'q'), (3, 'r'), (1, 's'), (3, 't')])
{1: ['p', 's'], 2: ['q'], 3: ['r', 't']}


Task 12:
Write a Python script that calls the ESXi HTTP API to create a virtual machine and after creation powers it on. Might need to use multiple requests to achieve this.
Keep in mind that the requests authentication is by using a custom session id header, that session id is generated by another API call.

Requirements:

- Have access to an ESXi server that has HTTP API enabled.
- The Python script should use the requests library to make HTTP requests to the ESXi server.
- The virtual machine that needs to be created should be identified by a name, guest OS, and hardware specifications (e.g. CPU, memory, disk size).
- Implement error handling in case the ESXi server or the virtual machine is not accessible.
- The Python script should return a success or failure message to the user. IMPORTANT: Use exit codes!!!! not 0 means unsuccessful (common values are 1 or -1) / 0 means successfull


Task 13:
You are given a JSON file containing data about employees in a company. And another JSON file containign salaries for the different departments. Write a Python function that reads this file, parses the JSON data, modifies it by adding a new key-value pair to each employee dictionary, and stores another json file a list of dictionaries containing information about each employee with the added key-value pair.

employees.json
{
  "employees": [
    {
      "name": "John Doe",
      "age": 30,
      "department": "Marketing"
    },
    {
      "name": "Jane Smith",
      "age": 25,
      "department": "Sales"
    },
    {
      "name": "Bob Johnson",
      "age": 35,
      "department": "Finance"
    }
  ]
}

Add a new key-value pair to the employee dictionary, where the key is "salary" and the value is based on the employee's department. The data about how much is the salary for each departament is kept in another json file:

departaments_salary.json
{
	"Marketing": 50000,
	"sales": 45000,
	"financE": 60000
}


This should output in another file (create the file if does not exists):
employees_with_salaries.json
[
    {"name": "John Doe", "age": 30, "department": "Marketing", "salary": 50000},
    {"name": "Jane Smith", "age": 25, "department": "Sales", "salary": 45000},
	{"name": "Bob Johnson", "age": 35, "department": "Finance", "salary": 60000}
]


Task 14:
You are given a string that contains a list of email addresses separated by commas. Write a Python function that uses regex to extract all the email addresses from the string and returns them as a list.
Use regexr.com or similar tool to test your regex.

>>> extract_emails("My email is john@example.com, but you can also reach me at jane@example.com.")
['john@example.com', 'jane@example.com']

Task 1:
You are working on a project that involves analyzing customer data for a retail company. The data is stored in a large CSV file with columns for customer name, product and quantity. 
Each product price is specified in another CSV file.

You should perform the following analysis:

 - Determine the number of unique customers in the data set.
 - Determine the total number of purchases made by each customer.
 - Determine the total revenue generated by each customer.


customer_purchases.csv
----------------------
Customer Name,Item Purchased,Quantity Purchased
John Doe,Apple,5
John Doe,Banana,10
Jane Smith,Orange,7
Jane Smith,Banana,9
Bob Johnson,Apple,5
Sara Lee,Orange,7
Samuel Smith,Apple,3
Samuel Smith,Banana,9
John Doe,Orange,6
Jane Smith,Apple,8
Bob Johnson,Banana,5
Sara Lee,Banana,7
Samuel Smith,Orange,5


item_prices.csv
---------------
Item,Price
Apple,1.00
Banana,0.50
Orange,2.00


Expected output:
----------------
Number of unique customers: 5

Total purchases made by each customer:
- John Doe: 21
- Jane Smith: 24
- Bob Johnson: 10
- Sara Lee: 14
- Samuel Smith: 17

Total revenue generated by each customer:
- John Doe: $32.00
- Jane Smith: $34.50
- Bob Johnson: $7.50
- Sara Lee: $17.50
- Samuel Smith: $17.50

Code example to read every line of a csv file:
with open('customer_data.csv') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
		# ....

Task 2:
Connect to the Kubernetes API and retrieve the list of running pods in a specific namespace.
For each pod, retrieve the labels assigned to it.
Create a set of unique labels across all pods.
For each unique label, retrieve the pods that have that label and create a dictionary where the key is the label value and the value is a list of pod names.
Print out the dictionary.

Task 3:
Write a Python program that takes in a list of email addresses as input and returns a dictionary with the number of email addresses from each domain. Your program should use regular expressions to extract the domain name from each email address.

The input to the program should be a list of email addresses in the following format:
[
    "user1@example.com",
    "user2@subdomain.example.com",
    "user3@example.net",
    "user4@example.com"
]
The output of the program should be a dictionary with the number of email addresses from each domain, like this:
{
    "example.com": 2,
    "subdomain.example.com": 1,
    "example.net": 1
}
To complete this task, you will need to use regular expressions to extract the domain name from each email address in the input list. You can use the re module in Python to work with regular expressions.

Task 4:
You need to extract data from a log file. The log file contains lines of text that represent HTTP requests. Each line may contain information about the request method, path, status code, and response time. Your task is to write a Python script that reads the log file and extracts all requests that have a response time greater than 500 milliseconds.
You should use regex to extract the necessary information from each log line

Here's an example log file:

2023-05-15 09:24:35,890 INFO  [worker-1] com.example.myapp.OrderProcessor - Processing order: 12345
2023-05-15 09:24:36,255 DEBUG [worker-1] com.example.myapp.OrderProcessor - GET /api/users 200 300ms Checking inventory for order: 12345
2023-05-15 09:24:36,500 INFO  [worker-1] com.example.myapp.InventoryService - Inventory check for order 12345: Found 3 items in stock
2023-05-15 09:24:36,502 INFO  [worker-1] com.example.myapp.OrderProcessor - POST /api/posts 201 700ms Reserving 3 items for order: 12345
2023-05-15 09:24:36,750 INFO  [worker-1] com.example.myapp.PaymentService - GET /api/comments 500 800ms Processing payment for order: 12345, amount: $150.00
2023-05-15 09:24:37,032 INFO  [worker-1] com.example.myapp.ShippingService - PUT /api/users/1 404 100ms Shipping order: 12345 to address: 123 Main St, Anytown USA
2023-05-15 09:24:37,500 INFO  [worker-1] com.example.myapp.OrderProcessor - GET /api/posts/1 200 600ms Order 12345 processed successfully
2023-05-15 09:24:37,500 DEBUG [worker-1] com.example.myapp.OrderProcessor - DELETE /api/comments/1 204 200ms Processing next order...


The expected output of the script should be:
POST /api/posts 201 700ms
GET /api/comments 500 800ms
GET /api/posts/1 200 600ms


Task OOP1:
Create a bank account management system. You need to create classes to represent the bank accounts and implement OOP concepts such as encapsulation and methods.

1. Create a class called BankAccount with the following attributes:
	- account_number - a unique identifier for the account.
	- customer_name - the name of the account holder.
	- balance - the current balance of the account.

2. Implement the following methods in the BankAccount class:
	- deposit(amount) - adds the specified amount to the account balance.
	- withdraw(amount) - subtracts the specified amount from the account balance. Check not to overdraft.
	- get_balance() - returns the current balance of the account.
	- display_account_info() - displays the account information in the following format:
"Account Number: [account_number], Customer Name: [customer_name], Balance: [balance]"

Note: keep in mind you can deposit and withdraw floating point numbers like 5.59

Example Usage:

# Create bank accounts
account1 = BankAccount("A001", "John", 1000.0)
account2 = BankAccount("A002", "Jane", 500.0)

account1.display_account_info()
# Output: Account Number: A001, Customer Name: John, Balance: 1000.00

account2.display_account_info()
# Output: Account Number: A002, Customer Name: Jane, Balance: 500.00

account1.deposit(500.0)
# Output: Deposited 500.00 units into account A001.

account2.withdraw(200.0)
# Output: Withdrew 200.00 units from account A002.

account2.withdraw(20000.0)
# Output: Insufficient funds.

balance1 = account1.get_balance()
print(f"Account A001 Balance: {balance1:.2f}")
# Output: Account A001 Balance: 1500.00

balance2 = account2.get_balance()
print(f"Account A002 Balance: {balance2:.2f}")
# Output: Account A002 Balance: 300.00

account1.display_account_info()
# Output: Account Number: A001, Customer Name: John, Balance: 1500.00

account2.display_account_info()
# Output: Account Number: A002, Customer Name: Jane, Balance: 300.00

Task OOP2:
Create a library management system to track books and magazines. The system should allow to add, search and display details of an item (book or magazine). You need to create classes to represent the library items and implement inheritance, encapsulation and abstraction concepts.

Requirements:

1. Create an abstract class called Item that has the following abstract methods:

	- get_item_type() -> Type - returns the type of the library item ("Book" or "Magazine"). Hint check what enum type is.
	- get_title() - returns the title of the library item.
	- get_author() - returns the author of the library item.
	- display_details() - displays the details of the library item.
	
Hint:
from enum import StrEnum

class Type(StrEnum):
    BOOK = "Book"
    MAGAZINE = "Magazine"

2. Create two classes that inherit from the Item class
 - class Book: with the following attributes:
	- title - the title of the book.
	- author - the author of the book.
	- isbn - the International Standard Book Number of the book.

 - class Magazine: with the following attributes:
	- title - the title of the magazine.
	- publisher - the publisher of the magazine.
	- issue_number - the issue number of the magazine.

3. Implement the abstract methods in the Book and Magazine classes according to the following specifications:
 - get_item_type() should return the type of the library item.
 - get_title() should return the title of the library item.
 - get_author() should return the author of the library item.
 - display_details() should display the details of the library item in the following format:
	- For a book: "Book: [title] by [author], ISBN: [isbn]"
	- For a magazine: "Magazine: [title] by [publisher], Issue: [issue_number]"
	
	
4. Create a library class called Library that can store and manage multiple library items. It should have the following methods:
Note: Use the appropriate data structure to store the items (list, dict or set)
 - add_item(item: Item) - adds a library item to the library.
 - search_item(title: str) - searches for a library item by title and displays its details. Display notice if the item is not found.
 - display_library() - displays the details of all library items in the library.
 

Example:

# Create a library
library = Library()

# Add books to the library
library.add_item(Book("AAA", "Ivan", "11111"))
library.add_item(Book("BBB", "Pesho", "22222"))

# Add magazines to the library
magazine1 = Magazine("Test", "BG", "May 2023")
magazine2 = Magazine("Time", "USA", "June 2023")
library.add_item(magazine1)
library.add_item(magazine2)

# Display the library
library.display_library()
# Library Items:
# Type.Book: AAA by Ivan, ISBN: 11111
# Type.Book: BBB by Pesho, ISBN: 22222
# Type.Magazine: Test by BG, Issue: May 2023
# Type.Magazine: Time by USA, Issue: June 2023

# Search for a book
library.search_item("BBB")
# Type.Book: BBB by Pesho, ISBN: 22222

# Search for a magazine
library.search_item("Time")
# Type.Magazine: Time by USA, Issue: June 2023

# Search for a non-existent item
library.search_item("Harry Potter")
# No item found with the title 'Harry Potter'.


Task OOP3:
Student management system

1. Create an enum GradeLevel to represent the different such as "GRADE_1", "GRADE_2", etc.


2. Create a class called Student with the following attributes:

	- id: A unique identifier for each student.
	- name
	- age
	- grade (as type of the property use the enum)
	- subjects: Store the subjects of a student that he is studing
	- marks: Store marks for the different subjects
	
3. Implement the following methods in the Student class:

	- display_details(): Displays the details of the student, including the student_id, name, age, grade, subjects, and marks.
	- update_grade(new_grade): Updates the grade of the student with the new_grade provided as a parameter.
	- add_subject(subject): Adds a new subject to the student's subjects.
	- add_mark(subject, mark_obtained): Add a mark to a specific subject. Check if the subject is learned by the student before adding the mark.

4. Create a class called StudentManager that stores and manages the student records:

	- add_student(student: Student)
	- search_student_by_id(student_id: int): return found student by id. Exception if not found
	- search_student_by_name(name: str): return found students by name (might be students with duplicate names). Exception if missing.
	- generate_report(): Print all students, including their details, average marks
	

manager = StudentManager()

# Create student objects
student1 = Student(1, "John", 15, GRADE_1)
student2 = Student(2, "Jane", 16, GRADE_5)
student3 = Student(3, "Jane", 12, GRADE_1)
student4 = Student(4, "Pesho", 14, GRADE_3)

manager.add_student(student1)
manager.add_student(student2)
manager.add_student(student3)
manager.add_student(student4)

found_student = manager.search_student_by_id(2)

student1.update_grade(GRADE_10)

student1.add_subject("Math")
student1.update_marks("Math", 90)

manager.generate_report()

Task OOP4:
Create an Employee Management System

1. Each employee must have a name, employee_id and ability to calculate salary.
Hint: think of abstraction here.
Hint2: how we represent abilities in a class? What is the thing in class that is doing some actions?

2. There are two types of employees 
- FullTimeEmployee
	This employee has an hourly_rate and based on that must calculate the monthly salary
	Note: assume a month has 21.5 work days and 8 work hous per day.
	
- Contractor
	Each contractor can work a concrete amount of months and for the whole contract period there is a fixed amount of money. That ammount and months may vary between contractors.
	Based on those rules calculate the monthly salary

3. Implement the acctual management of the employees. You shall support the follwoing options:
- add
- remove by id
- calculate total money to spend for all employees in a month
- list all employees

Task OOP5:
Online Shopping System. The system should utilize at least two abstract classes and two enumeration.

Mandatory:
 - use type hinting everywhere on properties, method arguments and return type
 - supply getters and setters where sutable 
 - make properies private
 - follow convention CammelCase for classes and snake_case for methods and properties


In the online shop there are a lot of products. Each product has id, name and price. Also for each product you must provide info (get_info()).

There ate two main types of products Electronics and Clothing.
Electornics have brand and warranty (represents months of warranty). And the inforamtion for the product shall include (as a string) its price, brand name and warranty period.
Clothing have size and colour. Make sure to provide a concrete list of colours (Hint: colour shall be enum). The information for the clothing shall provide size and colour info.

Your online shop supports two ways for payment (PaymentMethod). Both must provide a way to identify themselves via enum.

enum PaymentType(str, Enum):
	CREDIT_CARD = "CREDIT_CARD"
	PAYPAL = "PAYPAL"
	
And both of them provide a way to "process_payment" for a concrete amount of money.
Hint (process_payment(amount: int) -> None)

The first payment way is CreditCardPayment and implements its payment way.
The other PaypalPayment also implements its payment way.

The payment implementation shall be just a regular print in the console to indicate a payment is processed.

Your shop has a shopping cart that provides the follwoing functionallity
add_product, remove_product (by id), calculate_total_price and process_payment (via some PaymentMethod)

Task OOP6:
Vehicle Rental System
Mandatory:
 - use type hinting everywhere on properties, method arguments and return type
 - supply getters and setters where sutable 
 - make properies private
 - follow convention CammelCase for classes and snake_case for methods and properties

Your system is renting Vehicles. Each has the following attributes: id, make, model, year and has the ability to return info.

There are two types of vehicles: car and electric car.
The car has seats, fuel_type (do NOT hardcode the fuel type as string, what else you can use?)
The electric car has battery_capacity (float).

There are two types of regular car - GasolineCar and DieselCar
The gasoline has engine_capacity (float) and returns info containing the fuel type, seats count and engine capacity
The diesel one has emission_standard (enum), and returns info containing the fuel type, seats count and emission standard

There are two types of electric car - SmallElectricCar and LargeElectricCar
The small one has charging_time (int) and returns info containing the capacity and the charging time
The large one has max_range (float) and returns info containing the capacity and the max range.

The Vehicle Rental System shall define the follwoing actions:
rent_vehicle(Vehicle), return_vehicle(id), display_rented_vehicles (print the vehicle info for all rented vehicles)

Task DP 1:  Logger Singleton

The Logger class must have a single instance and will be responsible for logging messages to a file.

Implement it using the Singleton design pattern.
Methods:
	set_level(LogLevel): defines the logging level via predefined enum
	log(LogLevel, message): A method that logs the given message to a file if the log level is narrower than the set one. E.g. if you set log level to WARN, the DEBUG logs shall not be stored in the file
You can use the Python logging module to handle the file logging functionality.
File shall be created if missing. Define the file path in a variable.


Task DP 2: Document Builder
Implement a DocumentBuilder class that allows the creation of document objects with different sections and contents. 
The DocumentBuilder class should have methods to add a title, header, paragraph, and footer to the document. 
It should also have a method that returns the created document object.

Implement a Document class that represents a document and has the necessary attributes and methods (setters/getters) to store and retrieve the sections and contents.


Task DP 3: Shape Factory
Create Shape class should have a method called draw that prints a message indicating the type of shape being drawn.
Create subclasses (child classes) for different types of shapes such as Circle, Square, and Triangle. Each subclass should inherit from the Shape class and override the draw method to print a message specific to that shape.
Creaete ShapeFactory class should have a method called create_shape that takes enum in the shape type and returns the corresponding shape object.


Task DP 4: Pizza Ordering System

Singleton Design Pattern: 
	Implement a class OrderManager using the Singleton design pattern. 
	The OrderManager class should have a single instance throughout the program, and it should be responsible for managing all the pizza orders.

Builder Design Pattern
	Implement a PizzaBuilder class that allows the creation of pizza objects with different attributes.
	The PizzaBuilder class should have methods to set the pizza size, crust type, and toppings.
	It should also have a build method that returns the created pizza object.

Factory Design Pattern
	Implement a PizzaFactory class that is responsible for creating different types of pizzas based on user input. 
	The PizzaFactory class should have a method called create_pizza that takes in the pizza type (enum; e.g., "Margherita", "Pepperoni", etc.) 
	and returns the corresponding pizza object.

Your task is to:
Create a code that demonstrates the usage of the OrderManager, PizzaBuilder, and PizzaFactory classes. 
The code should show how a user can place an order, customize the pizza using the PizzaBuilder, and create different types of pizzas using the PizzaFactory.


Task DP 5: Employee Management System

Singleton Design Pattern: 
	Implement a class called EmployeeDatabase using the Singleton design pattern. 
	The EmployeeDatabase class should have a single instance throughout the program, and it should be responsible for managing the employee records.

Builder Design Pattern:
	Implement a EmployeeBuilder class that allows the creation of employee objects with different attributes. 
	The EmployeeBuilder class should have methods to set the employee's 
	name, position, and salary. 
	It should also have a build method that returns the created employee object.

Factory Design Pattern: 
	Implement a EmployeeFactory class that is responsible for creating different types of employees based on user input. 
	The EmployeeFactory class should have a method called create_employee that takes in the employee type (enum; e.g., "FullTime", "PartTime", etc.) and returns the corresponding employee object.

Implement a class called System that represents a user's management options. The System class should allow adding and removing employees, calculating the total salary.

